local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("LuckyX Hub", "DarkTheme")
local Tab = Window:NewTab("Moodeng Fruit")
local Section = Tab:NewSection("Auto Farm")

-- Configurations
local systems = {
    Boss = {
        dropdown = nil,
        selectedMonster = nil,
        uniqueMonsters = {},
        isAutoTeleportActive = false,
        enemiesFolderPath = workspace -- Replace with the actual folder path for System A
    },
    Mon = {
        dropdown = nil,
        selectedMonster = nil,
        uniqueMonsters = {},
        isAutoTeleportActive = false,
        monFolders = {
            workspace.Map.Mon:FindFirstChild("1-10"),
            workspace.Map.Mon:FindFirstChild("10000-50000"),
            workspace.Map.Mon:FindFirstChild("100000-10000000"),
            workspace.Map.Mon:FindFirstChild("50000-100000"),
            workspace.Map.Mon:FindFirstChild("Event"),
            workspace.Map.Mon:FindFirstChild("People"),
            workspace.Map.Mon:FindFirstChild("Slime")
        }
    }
}

-- Function to update monster list for each system
local function updateMonsterList(system)
    local config = systems[system]
    if not config then
        warn("System not found: " .. system)
        return
    end

    local seenMonsters = {}
    config.uniqueMonsters = {}

    if system == "Mon" then
        -- Check multiple folders for "Mon" system
        for _, folder in pairs(config.monFolders) do
            if folder then
                for _, monster in pairs(folder:GetChildren()) do
                    if monster:IsA("Model") and monster:FindFirstChild("NPC") and not seenMonsters[monster.Name] then
                        table.insert(config.uniqueMonsters, monster.Name)
                        seenMonsters[monster.Name] = true
                    end
                end
            end
        end
    elseif system == "Boss" then
        -- Check the single folder for "Boss" system
        local enemiesFolder = config.enemiesFolderPath
        if enemiesFolder then
            for _, monster in pairs(enemiesFolder:GetChildren()) do
                if monster:IsA("Model") and monster:FindFirstChild("NPC") and not seenMonsters[monster.Name] then
                    table.insert(config.uniqueMonsters, monster.Name)
                    seenMonsters[monster.Name] = true
                end
            end
        end
    end

    if config.dropdown then
        config.dropdown:Refresh(config.uniqueMonsters)
    end
end

-- Function to teleport to a monster for each system
local function teleportToMonster(system)
    local config = systems[system]
    if not config or not config.selectedMonster then return end

    local monstersFolder = system == "Mon" and config.monFolders or {config.enemiesFolderPath}

    -- วนลูปเช็คในทุกโฟลเดอร์ที่มอนสเตอร์อยู่
    for _, folder in pairs(monstersFolder) do
        if folder then
            for _, monster in pairs(folder:GetChildren()) do
                if monster:IsA("Model") and monster.Name == config.selectedMonster and monster:FindFirstChild("HumanoidRootPart") then
                    local humanoid = monster:FindFirstChild("Humanoid")
                    if humanoid then
                        -- ถ้ามอนสเตอร์มีชีวิตอยู่
                        if humanoid.Health > 0 then
                            local player = game.Players.LocalPlayer
                            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                local monsterPosition = monster.HumanoidRootPart.Position
                                local behindPosition = monsterPosition - monster.HumanoidRootPart.CFrame.LookVector * 3
                                player.Character.HumanoidRootPart.CFrame = CFrame.lookAt(behindPosition, monsterPosition)
                                print("Teleported to and facing:", config.selectedMonster)
                                return
                            end
                        else
                            print("Monster is dead, looking for another monster...")
                        end
                    end
                end
            end
        end
    end
    print("Monster not found:", config.selectedMonster)
end

-- Function to auto-click (without using the mouse directly)
local VirtualUser = game:GetService("VirtualUser")
local function autoClick()
    while _G.autoClickEnabled do
        VirtualUser:CaptureController()
        VirtualUser:ClickButton1(Vector2.new(0, 0)) -- จำลองการคลิกซ้ายที่ตำแหน่งหน้าจอ
        task.wait(0.1) -- ปรับดีเลย์ระหว่างคลิก (ค่าแนะนำ: 0.1 วินาที)
    end
end

-- Setup Dropdowns and Toggles for both Boss and Mon systems in the same section
for system, config in pairs(systems) do
    -- Dropdown for selecting monster
    config.dropdown = Section:NewDropdown("Select Monster (" .. system .. ")", "Choose a monster to teleport to for " .. system, config.uniqueMonsters, function(selected)
        config.selectedMonster = selected
        print("Selected Monster (" .. system .. "):", selected)
    end)

    -- Toggle for auto teleporting
    Section:NewToggle("Auto Teleport (" .. system .. ")", "Enable/Disable auto teleport for System " .. system, function(state)
        config.isAutoTeleportActive = state
        if state then
            print("Auto teleport (" .. system .. ") activated")
            while config.isAutoTeleportActive do
                teleportToMonster(system)
                task.wait(0) -- Adjusted to 1 second to avoid high CPU load
            end
        else
            print("Auto teleport (" .. system .. ") deactivated")
        end
    end)
end

-- Toggle for Auto Click
Section:NewToggle("Auto Click", "Enable/Disable auto-click at the center of the screen", function(state)
    _G.autoClickEnabled = state
    if state then
        print("Auto-click activated")
        task.spawn(autoClick) -- เริ่ม Auto Click ใน Task แยก
    else
        print("Auto-click deactivated")
    end
end)

-- Refresh the monster lists every second for both Boss and Mon systems
task.spawn(function()
    while true do
        updateMonsterList("Boss")
        updateMonsterList("Mon")
        task.wait(0) -- Adjusted to 1 second to avoid high CPU load
    end
end)

local Section = Tab:NewSection("Teleport")

local folderName = "Portal"
local folder = workspace.Map:FindFirstChild(folderName) -- ค้นหาโฟลเดอร์ใน Workspace

-- ตรวจสอบว่ามีโฟลเดอร์หรือไม่
if not folder then
    warn("Folder '" .. folderName .. "' not found in workspace")
else
   -- สร้างปุ่มสำหรับ Teleport ไปยังแต่ละ Part ในโฟลเดอร์
    for _, part in ipairs(folder:GetChildren()) do
        if part:IsA("BasePart") then
            -- ตัวแปรเก็บ CFrame ล่าสุดของ part
            local lastCFrame = part.CFrame

            -- สร้างฟังก์ชันเพื่อเทเลพอทไปที่ CFrame ของ part
            local function teleportToPart()
                local player = game.Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    -- ตรวจสอบ CFrame ของ part แบบไดนามิกเมื่อปุ่มถูกกด
                    if part and part:IsDescendantOf(workspace) then
                        player.Character.HumanoidRootPart.CFrame = lastCFrame -- ใช้ CFrame ล่าสุด
                        print("Teleported to portal:", part.Name)
                    else
                        warn("Cannot teleport: Part '" .. part.Name .. "' no longer exists.")
                    end
                else
                    warn("Cannot teleport: Player or HumanoidRootPart not found.")
                end
            end

            -- สร้างปุ่มเพื่อ Teleport ไปยัง Portal
            Section:NewButton("Teleport to Portal: " .. part.Name, "Teleport to " .. part.Name, function()
                -- เรียกฟังก์ชันเทเลพอทเพียงครั้งเดียว
                teleportToPart()
            end)

            -- เช็คการเปลี่ยนแปลง CFrame ของ part ตลอดเวลา
            game:GetService("RunService").Heartbeat:Connect(function()
                if part and part:IsDescendantOf(workspace) then
                    -- ตรวจสอบว่า CFrame ของ part เปลี่ยนแปลงหรือไม่
                    if part.CFrame ~= lastCFrame then
                        -- ถ้ามีการเปลี่ยนแปลง CFrame ของ part
                        print("Portal position changed to: " .. tostring(part.CFrame))

                        -- อัปเดต CFrame ของ part ใหม่
                        lastCFrame = part.CFrame
                    end
                end
            end)
        end
    end
end

local locations = {
    ["1"] = Vector3.new(168.127258, 42.0343094, 2320.65503, -0.965930343, 8.44340975e-05, 0.258802176, 8.28687844e-05, 1, -1.69574414e-05, -0.258802176, 5.06691504e-06, -0.965930343),
    ["2"] = Vector3.new(942.362427, -2.25993347, 1710.93201, 0.422592998, -0, -0.906319618, 0, 1, -0, 0.906319618, 0, 0.422592998),
	["3"] = Vector3.new(1270.34961, 60.1373138, 3490.69067, 0.47911483, -0, -0.877752185, 0, 1, -0, 0.877752185, 0, 0.47911483),
	["4"] = Vector3.new(2311.9292, -4.48340654, 2264.54492, -0.342042685, 0, -0.939684391, 0, 1, 0, 0.939684391, 0, -0.342042685),
	["5"] = Vector3.new(-1085.7915, 119.082008, 3694.10913, 0.000323414803, -0.157656521, -0.987493992, 8.68886709e-05, 0.987493992, -0.157656491, 1, -3.4801662e-05, 0.000333070755),
	["6"] = Vector3.new(-2356.35498, 4.16014862, 3722.41479, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["7"] = Vector3.new(-3000.03247, -2.37316132, 2883.33545, -0.707134247, 0, -0.707079291, 0, 1, 0, 0.707079291, 0, -0.707134247),
	["8"] = Vector3.new(-1157.56775, 22.3147049, 1694.55481, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["9"] = Vector3.new(-1357.58496, -1.275383, 580.95697, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["10"] = Vector3.new(-2741.20972, -0.559875488, 993.151611, 0, 0, -1, 0, 1, 0, 1, 0, 0)
}

local selectedLocation = nil

Section:NewDropdown("Select Location", "Choose a place to teleport", {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"}, function(locationName)
    selectedLocation = locations[locationName] -- เก็บตำแหน่งที่เลือก
    print("Selected location:", locationName)
end)

Section:NewButton("Teleport", "Teleport to the selected location", function()
    if selectedLocation then
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = CFrame.new(selectedLocation)
            print("Teleported to:", selectedLocation)
        else
            print("Error: Player or HumanoidRootPart not found.")
        end
    else
        print("Please select a location first.")
    end
end)
